FLOW OF DATA THROUGH WEB RTC

- we use vector clocks to order changes
- keep a list of changes w/ references to the state before they were applied
- clear changes from the list when all clients have recieved them
- when a message comes in that needs to occur before already appied local
  changes, we look through the change log to find the preceding state using
  vector clocks.  If the present value at the path of the change is equal to the
  value preceding the incoming message, it is safe to apply the change.  If the
  value has changed, rewind history to apply it at the correct point in time,
  and then replay events to restore state


FLOW OF AUDIO DATA

- SongBridge plays audio in the main thread and owns the cannonical playback
  position.  It creates a Worker and webaudio scriptprocessor node, and an
  initial zeroed buffer.

- SongBridge receives updated song state from ui app on change, passes state to
  worker

- on audioprocess SongBridge passes its existing buffer to the scriptprocessor
  node and sends a message to the worker requesting a new filled buffer

- The worker receives buffer messages, creates new filled buffers and transfers
  them back to the main thread

- SongBridge recieves incoming buffers and keeps them until the next
  audioprocess event


FLOW OF MIDI MESSAGES

- MidiInput recieves values, keep track of current note state for ui

- SongBridge binds to MidiInput onMessage and passes messages to the audio
  thread

- Song recieves midi messages,  keeps them in a list and passes them to tracks
  at tick rate.. it clears the list for every buffer.

- Tracks combine midi on/off messages with note on/off from sequences and pass
  to instruments as notesOn / notesOff arrays at tick rate

- Instruments keep track of current notes in their own way, use to generate
  audio


FLOW OF SAMPLE DATA

- instruments call addSample on the song worker to add a new sample, that sample
  is sent to the dsp thread and to concurrent workers

- when a new instrument uses a sample, it calls song.useSample incrementing a
  counter

- when an instrument stops using a sample, it calls song.releaseSample,
  decrementing a counter.  If the counter is zero, we free the memory


TIME SCALES

there are four time scales that we are concerned with

- sample rate
runs at 44100 hz, once for each sample of audio we output.  Any code running
at this rate has a high cost, so performance is important here

- tick rate
Ticks run every n samples, defined using the clockRatio variable.  This
allows us to do processing that needs to run frequently, but is too expensive
to run for each smaple.  For example, this is the time resolution at which
we trigger new notes.

- buffer rate
This is the rate that the scriptprocessornode requests audio buffers

- frame rate
The frame rate is the speed at which we trigger GUI updates for things like
level meters and playback position.  we continue to run frame updates whether
on not audio is playing
